import { useState } from 'react';\n\ninterface OptimizedImageProps {\n  src: string;\n  alt: string;\n  className?: string;\n  width?: number;\n  height?: number;\n  loading?: 'lazy' | 'eager';\n  priority?: boolean;\n}\n\nconst OptimizedImage: React.FC<OptimizedImageProps> = ({\n  src,\n  alt,\n  className = '',\n  width,\n  height,\n  loading = 'lazy',\n  priority = false,\n}) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  const handleLoad = () => setIsLoaded(true);\n  const handleError = () => setHasError(true);\n\n  if (hasError) {\n    return (\n      <div \n        className={`${className} bg-gray-200 flex items-center justify-center text-gray-400`}\n        style={{ width: width || 'auto', height: height || 'auto' }}\n        role=\"img\"\n        aria-label={`Failed to load: ${alt}`}\n      >\n        <span className=\"text-sm\">Image unavailable</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"relative\">\n      {/* Loading placeholder */}\n      {!isLoaded && (\n        <div \n          className={`${className} bg-gray-200 animate-pulse`}\n          style={{ width: width || 'auto', height: height || 'auto' }}\n        />\n      )}\n      \n      {/* Optimized image */}\n      <img\n        src={src}\n        alt={alt}\n        className={`${className} transition-opacity duration-300 ${\n          isLoaded ? 'opacity-100' : 'opacity-0'\n        }`}\n        width={width}\n        height={height}\n        loading={priority ? 'eager' : loading}\n        onLoad={handleLoad}\n        onError={handleError}\n        decoding=\"async\"\n      />\n    </div>\n  );\n};\n\nexport default OptimizedImage;\n