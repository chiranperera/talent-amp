import { useEffect } from 'react';\n\n// Performance monitoring hook\nexport const usePerformance = (componentName: string) => {\n  useEffect(() => {\n    // Mark component mount\n    if (typeof window !== 'undefined' && window.performance) {\n      window.performance.mark(`${componentName}-mount-start`);\n      \n      return () => {\n        window.performance.mark(`${componentName}-mount-end`);\n        window.performance.measure(\n          `${componentName}-mount`,\n          `${componentName}-mount-start`,\n          `${componentName}-mount-end`\n        );\n      };\n    }\n  }, [componentName]);\n};\n\n// Throttle function for scroll events\nexport const useThrottledScroll = (callback: () => void, delay: number = 16) => {\n  useEffect(() => {\n    let timeoutId: NodeJS.Timeout;\n    let lastExecTime = 0;\n    \n    const throttledCallback = () => {\n      const currentTime = Date.now();\n      \n      if (currentTime - lastExecTime > delay) {\n        callback();\n        lastExecTime = currentTime;\n      } else {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(() => {\n          callback();\n          lastExecTime = Date.now();\n        }, delay - (currentTime - lastExecTime));\n      }\n    };\n    \n    window.addEventListener('scroll', throttledCallback, { passive: true });\n    \n    return () => {\n      window.removeEventListener('scroll', throttledCallback);\n      clearTimeout(timeoutId);\n    };\n  }, [callback, delay]);\n};\n\n// Intersection Observer hook with performance optimization\nexport const useIntersectionObserver = (\n  callback: (isIntersecting: boolean) => void,\n  options?: IntersectionObserverInit\n) => {\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        callback(entry.isIntersecting);\n      },\n      {\n        threshold: 0.1,\n        rootMargin: '50px',\n        ...options,\n      }\n    );\n    \n    return () => observer.disconnect();\n  }, [callback, options]);\n};\n